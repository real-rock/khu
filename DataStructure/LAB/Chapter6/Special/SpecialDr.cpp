// Test driver#include <iostream>#include <fstream>#include <string>#include <cctype>#include <cstring>#include "SpecializedList.h"using namespace std;int main(){  ifstream inFile;       // file containing operations  ofstream outFile;      // file containing output  string inFileName;     // input file external name  string outFileName;    // output file external name  string outputLabel;       string command;        // operation to be executed  bool finished;    int item;  SpecializedList list;  int numCommands;  // Prompt for file names, read file names, and prepare files  cout << "Enter name of input command file; press return." << endl;  cin  >> inFileName;  inFile.open(inFileName.c_str());  cout << "Enter name of output file; press return." << endl;  cin  >> outFileName;  outFile.open(outFileName.c_str());  cout << "Enter name of test run; press return." << endl;  cin  >> outputLabel;  outFile << outputLabel << endl;  inFile >> command;  numCommands = 0;  while (command != "Quit")  {     if (command == "InsertFront")    {      inFile >> item;       list.InsertFront(item);      outFile << item;      outFile << " is inserted at the front" << endl;    }    else if (command == "InsertEnd")    {      inFile >> item;      list.InsertEnd(item);      outFile << item;      outFile << " is inserted at the end" << endl;    }    else if (command == "ResetBackward")      list.ResetBackward();    else if (command == "ResetForward")        list.ResetForward();    else if (command == "GetNextItem")    {      list.GetNextItem(item, finished);      outFile << "Next item is " << item << endl;      if (finished)        outFile << "Last item in the list returned." << endl;    }        else if (command == "GetPriorItem")    {      list.GetPriorItem(item, finished);      outFile << "Prior item is " << item << endl;      if (finished)        outFile << "First item in the list returned." << endl;    }    numCommands++;    cout <<  " Command number " << numCommands << " completed."          << endl;    inFile >> command;   }   cout << "Testing completed."  << endl;  inFile.close();  outFile.close();  return 0;}