#include <fstream>#include "StrType.h"#include <cstddef>#include <iostream>#include <string>struct WordType{public:  StrType word;  int count;};struct TreeNode{  WordType info;  TreeNode* left;  TreeNode* right;};class ListType{public:  ListType();  void InsertOrIncrement(StrType string);  void PrintList(std::ofstream&);private:  TreeNode* root;};    int main(){  using namespace std;  ListType list;  string inFileName;  string outFileName;  string outputLabel;  ifstream inFile;  ofstream outFile;  StrType string;  int minimumLength;  using namespace std;    // Prompt for file names, read file names, and prepare files  cout << "Enter name of input command file; press return." << endl;  cin  >> inFileName;  inFile.open(inFileName.c_str());  cout << "Enter name of output file; press return." << endl;  cin  >> outFileName;  outFile.open(outFileName.c_str());  cout << "Enter name of test run; press return." << endl;  cin  >> outputLabel;  outFile << outputLabel << endl;  cout << "Enter the minimum size word to be considered." << endl;  cin >> minimumLength;    string.GetStringFile(true, ALPHA_NUM, inFile);  while (inFile)  {    if (string.LengthIs() >= minimumLength)      list.InsertOrIncrement(string);      string.GetStringFile(true, ALPHA_NUM, inFile);  }  list.PrintList(outFile);  outFile.close();  inFile.close();  return 0;}ListType::ListType(){  root = NULL;}  void Process(TreeNode*& tree, StrType string){  if (tree == NULL)  {    tree = new TreeNode;    tree->info.word = string;    tree->info.count = 1;    tree->left = NULL;    tree->right = NULL;  }  else if (tree->info.word == string)    tree->info.count++;  else if (string < tree->info.word)    Process(tree->left, string);  else     Process(tree->right, string);}void ListType::InsertOrIncrement(StrType string){  Process(root, string);}     void Print(TreeNode*& tree, std::ofstream& outFile){    if (tree != NULL)  {    Print(tree->left, outFile);    tree->info.word.PrintToFile(true, outFile);    outFile  << " " << tree->info.count;    Print(tree->right, outFile);  }}void ListType::PrintList(std::ofstream& outFile){  Print(root, outFile);}